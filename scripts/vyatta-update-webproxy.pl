#!/usr/bin/perl
#
# Module: vyatta-update-webproxy.pl
# 
# **** License ****
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
# 
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
# 
# This code was originally developed by Vyatta, Inc.
# Portions created by Vyatta are Copyright (C) 2008 Vyatta, Inc.
# All Rights Reserved.
# 
# Author: Stig Thormodsrud
# Date: August 2008
# Description: Script to configure webproxy (squid and squidguard).
# 
# **** End License ****
#

use Getopt::Long;
use NetAddr::IP;
use POSIX;

use lib "/opt/vyatta/share/perl5/";
use VyattaConfig;

use warnings;
use strict;

my $squid_conf      = '/etc/squid3/squid.conf';
my $squid_log       = '/var/log/squid3/access.log';
my $squid_cache_dir = '/var/spool/squid3';
my $squid_init      = '/etc/init.d/squid3';
my $squid_def_fs    = 'ufs';
my $squid_def_port  = 3128;

sub webproxy_restart {
    system("$squid_init restart");
}

sub webproxy_stop {
    system("$squid_init stop");
}

sub webproxy_get_constants {
    my $output;
    
    my $date = `date`;
    chomp $date;
    $output  = "#\n# autogenerated by vyatta-update-webproxy.pl on $date\n#\n";

    $output .= "access_log $squid_log squid\n\n";

    $output .= "acl manager proto cache_object\n";
    $output .= "acl localhost src 127.0.0.1/32\n";
    $output .= "acl to_localhost dst 127.0.0.0/8\n";
    $output .= "acl net src 0.0.0.0/0\n";
    $output .= "acl SSL_ports port 443\n";
    $output .= "acl Safe_ports port 80          # http\n";
    $output .= "acl Safe_ports port 21          # ftp\n";
    $output .= "acl Safe_ports port 443         # https\n";
    $output .= "acl Safe_ports port 70          # gopher\n";
    $output .= "acl Safe_ports port 210         # wais\n";
    $output .= "acl Safe_ports port 1025-65535  # unregistered ports\n";
    $output .= "acl Safe_ports port 280         # http-mgmt\n";
    $output .= "acl Safe_ports port 488         # gss-http\n";
    $output .= "acl Safe_ports port 591         # filemaker\n";
    $output .= "acl Safe_ports port 777         # multiling http\n";
    $output .= "acl CONNECT method CONNECT\n\n";
    
    $output .= "http_access allow manager localhost\n";
    $output .= "http_access deny manager\n";
    $output .= "http_access deny !Safe_ports\n";
    $output .= "http_access deny CONNECT !SSL_ports\n";
    $output .= "http_access allow localhost\n";
    $output .= "http_access allow net\n";
    $output .= "http_access deny all\n\n";

    return $output;
}

sub webproxy_get_values {
    my $output = '';
    my $config = new VyattaConfig;

    $config->setLevel("service webproxy");
    my $def_port = $config->returnValue("default-port");
    $def_port = $squid_def_port if ! defined $def_port;

    my $cache_size = $config->returnValue("cache-size");
    if (! defined $cache_size) {
	print "Must define cache-size\n";
	exit 1;
    }
    $output = "cache_dir $squid_def_fs $squid_cache_dir $cache_size 16 256\n\n";

    $config->setLevel("service webproxy listening-address");
    my @ipaddrs = $config->listNodes();
    if (scalar(@ipaddrs) <= 0) {
	print "Must define at least 1 listening-address\n";
	exit 1;
    }
    foreach my $ipaddr (@ipaddrs) {
	my $port = $config->returnValue("$ipaddr port");	
	$port = $def_port if ! defined $port;	
	my $transparent = "transparent";
	if ($config->exists("$ipaddr disable-transparent")) {
	    $transparent = "";
	}
	$output .= "http_port $ipaddr:$port $transparent\n";
    }

    return $output;
}

sub webproxy_write_file {
    my ($config) = @_;

    open(my $fh, '>', $squid_conf) || die "Couldn't open $squid_conf - $!";
    print $fh $config;
    close $fh;
}



#
# main
#
my $update_webproxy;
my $stop_webproxy;

GetOptions("update!" => \$update_webproxy,
           "stop!"   => \$stop_webproxy);

if (defined $update_webproxy) { 
    my $config;

    $config  = webproxy_get_constants();
    $config .= webproxy_get_values();
    webproxy_write_file($config);
    webproxy_restart();
}

if (defined $stop_webproxy) {
    webproxy_stop();
}

exit 0;

# end of file
